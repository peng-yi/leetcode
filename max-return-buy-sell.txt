def maxSubArray(nums:list):
    '''
    Help function.
    Kadane's dynamic programming algorithm to find continuum subarray to have largest sum
    '''
    sum_result = [0 for i in range(len(nums))]
    sum_result[0] = nums[0]

    index_start = 0
    index_end = 0

    for i in range(1, len(nums)):
        if sum_result[i-1] < 0:
            sum_result[i] = nums[i]
            index_start = i-1
        else:
            sum_result[i] = sum_result[i-1] + nums[i]

    result = max(sum_result)
    index_end = sum_result.index(result)

    return result, index_start, index_end       # maxSum and start and end indices

def maxReturn(P:list):
    '''
    Compute the maximum return if buy and sell a stock given know price series
    P is given price series for day 1, day 2, day 3, ...
    '''
    dP = [0]                       # compute price change from previous day
    for i in range(len(P)-1):
        dP.append(P[i+1] - P[i])

    payoff, day_buy, day_sell = maxSubArray(dP)

    day_buy += 1                   # assuming price series starts with day 1, instead of day 0
    day_sell += 1

    print("#####################################################")
    print("Price series (day 1, day 2, ...)")
    print(P)
    print(f"Maximum payoff = {payoff}")
    print(f"Buy on day {day_buy}")
    print(f"Sell on day {day_sell}")
    print("#####################################################")
    return payoff, day_buy, day_sell

if __name__=="__main__":

    P = [0, -2, -1, -4, 0, -1, 1, 2, -3, 1]     # price time series, day 1, day 2, etc
    #P = [0, 5, 9, 8, 15, 23]
    P = [-2, -3]
    maxReturn(P)
